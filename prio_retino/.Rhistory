shiny::runApp()
shiny::runApp()
runApp()
styler:::style_active_file()
styler:::style_active_file()
runApp()
runApp()
shiny::runApp()
runApp()
getwd()
rsconnect::setAccountInfo(name='cym-ai',
token='5910E1906E1EE23022301C88D4CC698A',
secret='0NQOeEOWhvhfwPnb9dAnSFvjfYIUSQJh6/TsrFy9')
library(rsconnect)
library(rsconnect)
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='cym-ai',
token='5910E1906E1EE23022301C88D4CC698A',
secret='0NQOeEOWhvhfwPnb9dAnSFvjfYIUSQJh6/TsrFy9')
deployApp()
install.packages("renv")
deployApp()
runApp('~/Personnel_Laval_Jacquin/KER_IA/GAIHA/GAIHA_APPS/test.R')
runApp()
?imageOutput
shiny::runApp()
getwd()
library(rsconnect)
rsconnect::setAccountInfo(name='cym-ai',
token='5910E1906E1EE23022301C88D4CC698A',
secret='0NQOeEOWhvhfwPnb9dAnSFvjfYIUSQJh6/TsrFy9')
deployApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
rsconnect::setAccountInfo(name='cym-ai',
token='5910E1906E1EE23022301C88D4CC698A',
secret='0NQOeEOWhvhfwPnb9dAnSFvjfYIUSQJh6/TsrFy9')
getwd()
# global items, libraries and database connection
library(shiny)
library(ggplot2)
library(plotly)
library(umap)
library(FactoMineR)
library(gridExtra)
library(data.table)
library(DT)
library(GGally)
library(psych)
library(readxl)
library(MASS)
library(caret)
library(pROC)
library(randomForest)
library(vip)
library(stringr)
library(shinymanager)
library(shinyWidgets)
library(performanceEstimation)
library(rsconnect)
deployApp()
# library(xlsx)
library(randomForest)
library(e1071)
library(pROC)
library(dplyr)
library(doBy)
library(ggplot2)
library(pscl)
library(data.table)
library(ResourceSelection)
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
source("splitter.R")
source("SVMclassifier.R")
source("evaluateclassifier.R")
## Read data
cancer_data <- as.data.frame(fread("../ebp_train_data/dataR2_with_units.csv",
select = c(
"Glucose (mg/dL)", "Resistin (ng/mL)",
"Age (year)", "BMI (kg/m2)", "Classification"
)
))
control_subset = cancer_data[cancer_data$Classification==1, ]
cancer_subset = cancer_data[cancer_data$Classification==2, ]
## Plot some graphics for age and BMI
dev.new()
par(mfrow=c(2,2))
hist(control_subset$`Age (year)`,
main = paste0('Age distribution for control data (median age : ',
median(control_subset$`Age (year)`), ', count : ',
nrow(control_subset), ')'), col='green',
xlab = "Age")
hist(control_subset$`BMI (kg/m2)`,
main = paste0('BMI distribution for control data (median BMI : ',
median(control_subset$`BMI (kg/m2)`), ', count : ',
nrow(control_subset), ')'), col='green',
xlab = "BMI")
hist(cancer_subset$`Age (year)`,
main = paste0('Age distribution for cancer data (median age : ',
median(cancer_subset$`Age (year)`), ', count : ',
nrow(cancer_subset), ')'), col='red',
xlab = "Age")
hist(cancer_subset$`BMI (kg/m2)`,
main = paste0('BMI distribution for cancer data (median BMI : ',
median(cancer_subset$`BMI (kg/m2)`), ', count : ',
nrow(cancer_subset), ')'), col='red',
xlab = "BMI")
## Plot some graphics for glucose and resistin
dev.new()
par(mfrow=c(2,2))
hist(control_subset$`Glucose (mg/dL)`,
main = paste0('Glucose distribution for control data (median glucose : ',
median(control_subset$`Glucose (mg/dL)`), ', count : ',
nrow(control_subset), ')'), col='green',
xlab = "Glucose")
hist(control_subset$`Resistin (ng/mL)`,
main = paste0('Resistin distribution for control data (median resistin : ',
median(control_subset$`Resistin (ng/mL)`), ', count : ',
nrow(control_subset), ')'), col='green',
xlab = "Resistin")
hist(cancer_subset$`Glucose (mg/dL)`,
main = paste0('Glucose distribution for cancer data (median glucose : ',
median(cancer_subset$`Glucose (mg/dL)`), ', count : ',
nrow(cancer_subset), ')'), col='red',
xlab = "Glucose")
hist(cancer_subset$`Resistin (ng/mL)`,
main = paste0('Resistin distribution for cancer data (median resistin : ',
median(cancer_subset$`Resistin (ng/mL)`), ', count : ',
nrow(cancer_subset), ')'), col='red',
xlab = "Resistin")
cancer_data$Classification <- as.factor(cancer_data$Classification)
## Number of iterations for Monte Carlo estimation
number.of.iterations <- 500
## Initialize a vector of list for the models
list_models <- vector(number.of.iterations, mode = "list")
vect_thresholds <- rep(0, number.of.iterations)
# AUC, accuracy, specificity, sensitivity, PPV and NPV associated to applying SVM
SVM_AUC <- matrix(NA, number.of.iterations, 1)
SVM_acc <- matrix(NA, number.of.iterations, 1)
SVM_specificity <- matrix(NA, number.of.iterations, 1)
SVM_sensitivity <- matrix(NA, number.of.iterations, 1)
SVM_PPV <- matrix(NA, number.of.iterations, 1)
SVM_NPV <- matrix(NA, number.of.iterations, 1)
for (iterationindex in 1:number.of.iterations)
{
set.seed(iterationindex) # controls the random process of splitting the data
splitteddata <- splitter(cancer_data, 0.7) # splits the data
trainset <- splitteddata[[1]] # train set
testset <- splitteddata[[2]] # test set
SVM.prediction <- SVMclassifier(trainset, testset)
SVM.evaluation <- evaluateclassifier(SVM.prediction$cancer.probability, testset)
SVM_AUC[iterationindex] <- SVM.evaluation[[1]]
SVM_acc[iterationindex] <- SVM.evaluation[[2]]
SVM_specificity[iterationindex] <- SVM.evaluation[[3]]
SVM_sensitivity[iterationindex] <- SVM.evaluation[[4]]
SVM_PPV[iterationindex] <- SVM.evaluation[[5]]
SVM_NPV[iterationindex] <- SVM.evaluation[[6]]
list_models[[iterationindex]] <- SVM.prediction$SVMfit
vect_thresholds[iterationindex] <- SVM.evaluation$opt_threshold
}
c(mean(SVM_AUC) - qnorm(0.975) * sqrt(sd(SVM_AUC) / number.of.iterations), mean(SVM_AUC) + qnorm(0.975) * sqrt(sd(SVM_AUC) / number.of.iterations))
c(mean(SVM_sensitivity) - qnorm(0.975) * sqrt(sd(SVM_sensitivity) / number.of.iterations), mean(SVM_sensitivity) + qnorm(0.975) * sqrt(sd(SVM_sensitivity) / number.of.iterations))
c(mean(SVM_specificity) - qnorm(0.975) * sqrt(sd(SVM_specificity) / number.of.iterations), mean(SVM_specificity) + qnorm(0.975) * sqrt(sd(SVM_specificity) / number.of.iterations))
c(mean(SVM_acc) - qnorm(0.975) * sqrt(sd(SVM_acc) / number.of.iterations), mean(SVM_acc) + qnorm(0.975) * sqrt(sd(SVM_acc) / number.of.iterations))
## Save list of models and list of thresholds optimizing Younden's index
# saveRDS(list_models, file = "../../ebp/ebp_ensemble_svm_classifier")
# saveRDS(vect_thresholds, file = "../../ebp/vect_thresh_optim_younden_index")
cancer.probability<-predict(list_models[[500]], testset[c(-ncol(testset))], probability=TRUE)
cancer.probability=attr(cancer.probability, "prob")[,1]
binary.classification=as.numeric(cancer.probability>vect_thresholds[500])+1
testset$Classification
mean(binary.classification==testset$Classification)
plot(hist(vect_thresholds))
# library(xlsx)
library(randomForest)
library(e1071)
library(pROC)
library(dplyr)
library(doBy)
library(ggplot2)
library(pscl)
library(data.table)
library(ResourceSelection)
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
source("splitter.R")
source("SVMclassifier.R")
source("evaluateclassifier.R")
## Read data
cancer_data <- as.data.frame(fread("../ebp_train_data/dataR2_with_units.csv",
select = c(
"Glucose (mg/dL)", "Resistin (ng/mL)",
"Age (year)", "BMI (kg/m2)", "Classification"
)
))
control_subset = cancer_data[cancer_data$Classification==1, ]
cancer_subset = cancer_data[cancer_data$Classification==2, ]
## Plot some graphics for age and BMI
dev.new()
par(mfrow=c(2,2))
hist(control_subset$`Age (year)`,
main = paste0('Age distribution for control data (median age : ',
median(control_subset$`Age (year)`), ', count : ',
nrow(control_subset), ')'), col='green',
xlab = "Age")
hist(control_subset$`BMI (kg/m2)`,
main = paste0('BMI distribution for control data (median BMI : ',
median(control_subset$`BMI (kg/m2)`), ', count : ',
nrow(control_subset), ')'), col='green',
xlab = "BMI")
hist(cancer_subset$`Age (year)`,
main = paste0('Age distribution for cancer data (median age : ',
median(cancer_subset$`Age (year)`), ', count : ',
nrow(cancer_subset), ')'), col='red',
xlab = "Age")
hist(cancer_subset$`BMI (kg/m2)`,
main = paste0('BMI distribution for cancer data (median BMI : ',
median(cancer_subset$`BMI (kg/m2)`), ', count : ',
nrow(cancer_subset), ')'), col='red',
xlab = "BMI")
## Plot some graphics for glucose and resistin
dev.new()
par(mfrow=c(2,2))
hist(control_subset$`Glucose (mg/dL)`,
main = paste0('Glucose distribution for control data (median glucose : ',
median(control_subset$`Glucose (mg/dL)`), ', count : ',
nrow(control_subset), ')'), col='green',
xlab = "Glucose")
hist(control_subset$`Resistin (ng/mL)`,
main = paste0('Resistin distribution for control data (median resistin : ',
median(control_subset$`Resistin (ng/mL)`), ', count : ',
nrow(control_subset), ')'), col='green',
xlab = "Resistin")
hist(cancer_subset$`Glucose (mg/dL)`,
main = paste0('Glucose distribution for cancer data (median glucose : ',
median(cancer_subset$`Glucose (mg/dL)`), ', count : ',
nrow(cancer_subset), ')'), col='red',
xlab = "Glucose")
hist(cancer_subset$`Resistin (ng/mL)`,
main = paste0('Resistin distribution for cancer data (median resistin : ',
median(cancer_subset$`Resistin (ng/mL)`), ', count : ',
nrow(cancer_subset), ')'), col='red',
xlab = "Resistin")
set.seed(123)
cancer_data$Classification <- as.factor(cancer_data$Classification)
## Number of iterations for Monte Carlo estimation
number.of.iterations <- 500
## Initialize a vector of list for the models
list_models <- vector(number.of.iterations, mode = "list")
vect_thresholds <- rep(0, number.of.iterations)
# AUC, accuracy, specificity, sensitivity, PPV and NPV associated to applying SVM
SVM_AUC <- matrix(NA, number.of.iterations, 1)
SVM_acc <- matrix(NA, number.of.iterations, 1)
SVM_specificity <- matrix(NA, number.of.iterations, 1)
SVM_sensitivity <- matrix(NA, number.of.iterations, 1)
SVM_PPV <- matrix(NA, number.of.iterations, 1)
SVM_NPV <- matrix(NA, number.of.iterations, 1)
for (iterationindex in 1:number.of.iterations)
{
set.seed(iterationindex) # controls the random process of splitting the data
splitteddata <- splitter(cancer_data, 0.7) # splits the data
trainset <- splitteddata[[1]] # train set
testset <- splitteddata[[2]] # test set
SVM.prediction <- SVMclassifier(trainset, testset)
SVM.evaluation <- evaluateclassifier(SVM.prediction$cancer.probability, testset)
SVM_AUC[iterationindex] <- SVM.evaluation[[1]]
SVM_acc[iterationindex] <- SVM.evaluation[[2]]
SVM_specificity[iterationindex] <- SVM.evaluation[[3]]
SVM_sensitivity[iterationindex] <- SVM.evaluation[[4]]
SVM_PPV[iterationindex] <- SVM.evaluation[[5]]
SVM_NPV[iterationindex] <- SVM.evaluation[[6]]
list_models[[iterationindex]] <- SVM.prediction$SVMfit
vect_thresholds[iterationindex] <- SVM.evaluation$opt_threshold
}
c(mean(SVM_AUC) - qnorm(0.975) * sqrt(sd(SVM_AUC) / number.of.iterations), mean(SVM_AUC) + qnorm(0.975) * sqrt(sd(SVM_AUC) / number.of.iterations))
c(mean(SVM_sensitivity) - qnorm(0.975) * sqrt(sd(SVM_sensitivity) / number.of.iterations), mean(SVM_sensitivity) + qnorm(0.975) * sqrt(sd(SVM_sensitivity) / number.of.iterations))
c(mean(SVM_specificity) - qnorm(0.975) * sqrt(sd(SVM_specificity) / number.of.iterations), mean(SVM_specificity) + qnorm(0.975) * sqrt(sd(SVM_specificity) / number.of.iterations))
c(mean(SVM_acc) - qnorm(0.975) * sqrt(sd(SVM_acc) / number.of.iterations), mean(SVM_acc) + qnorm(0.975) * sqrt(sd(SVM_acc) / number.of.iterations))
## Save list of models and list of thresholds optimizing Younden's index
# saveRDS(list_models, file = "../../ebp/ebp_ensemble_svm_classifier")
# saveRDS(vect_thresholds, file = "../../ebp/vect_thresh_optim_younden_index")
cancer.probability<-predict(list_models[[500]], testset[c(-ncol(testset))], probability=TRUE)
cancer.probability=attr(cancer.probability, "prob")[,1]
binary.classification=as.numeric(cancer.probability>vect_thresholds[500])+1
testset$Classification
mean(binary.classification==testset$Classification)
plot(hist(vect_thresholds))
# library(xlsx)
library(randomForest)
library(e1071)
library(pROC)
library(dplyr)
library(doBy)
library(ggplot2)
library(pscl)
library(data.table)
library(ResourceSelection)
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
source("splitter.R")
source("SVMclassifier.R")
source("evaluateclassifier.R")
## Read data
cancer_data <- as.data.frame(fread("../ebp_train_data/dataR2_with_units.csv",
select = c(
"Glucose (mg/dL)", "Resistin (ng/mL)",
"Age (year)", "BMI (kg/m2)", "Classification"
)
))
control_subset = cancer_data[cancer_data$Classification==1, ]
cancer_subset = cancer_data[cancer_data$Classification==2, ]
## Plot some graphics for age and BMI
dev.new()
par(mfrow=c(2,2))
hist(control_subset$`Age (year)`,
main = paste0('Age distribution for control data (median age : ',
median(control_subset$`Age (year)`), ', count : ',
nrow(control_subset), ')'), col='green',
xlab = "Age")
hist(control_subset$`BMI (kg/m2)`,
main = paste0('BMI distribution for control data (median BMI : ',
median(control_subset$`BMI (kg/m2)`), ', count : ',
nrow(control_subset), ')'), col='green',
xlab = "BMI")
hist(cancer_subset$`Age (year)`,
main = paste0('Age distribution for cancer data (median age : ',
median(cancer_subset$`Age (year)`), ', count : ',
nrow(cancer_subset), ')'), col='red',
xlab = "Age")
hist(cancer_subset$`BMI (kg/m2)`,
main = paste0('BMI distribution for cancer data (median BMI : ',
median(cancer_subset$`BMI (kg/m2)`), ', count : ',
nrow(cancer_subset), ')'), col='red',
xlab = "BMI")
## Plot some graphics for glucose and resistin
dev.new()
par(mfrow=c(2,2))
hist(control_subset$`Glucose (mg/dL)`,
main = paste0('Glucose distribution for control data (median glucose : ',
median(control_subset$`Glucose (mg/dL)`), ', count : ',
nrow(control_subset), ')'), col='green',
xlab = "Glucose")
hist(control_subset$`Resistin (ng/mL)`,
main = paste0('Resistin distribution for control data (median resistin : ',
median(control_subset$`Resistin (ng/mL)`), ', count : ',
nrow(control_subset), ')'), col='green',
xlab = "Resistin")
hist(cancer_subset$`Glucose (mg/dL)`,
main = paste0('Glucose distribution for cancer data (median glucose : ',
median(cancer_subset$`Glucose (mg/dL)`), ', count : ',
nrow(cancer_subset), ')'), col='red',
xlab = "Glucose")
hist(cancer_subset$`Resistin (ng/mL)`,
main = paste0('Resistin distribution for cancer data (median resistin : ',
median(cancer_subset$`Resistin (ng/mL)`), ', count : ',
nrow(cancer_subset), ')'), col='red',
xlab = "Resistin")
set.seed(1)
cancer_data$Classification <- as.factor(cancer_data$Classification)
## Number of iterations for Monte Carlo estimation
number.of.iterations <- 500
## Initialize a vector of list for the models
list_models <- vector(number.of.iterations, mode = "list")
vect_thresholds <- rep(0, number.of.iterations)
# AUC, accuracy, specificity, sensitivity, PPV and NPV associated to applying SVM
SVM_AUC <- matrix(NA, number.of.iterations, 1)
SVM_acc <- matrix(NA, number.of.iterations, 1)
SVM_specificity <- matrix(NA, number.of.iterations, 1)
SVM_sensitivity <- matrix(NA, number.of.iterations, 1)
SVM_PPV <- matrix(NA, number.of.iterations, 1)
SVM_NPV <- matrix(NA, number.of.iterations, 1)
for (iterationindex in 1:number.of.iterations)
{
set.seed(iterationindex) # controls the random process of splitting the data
splitteddata <- splitter(cancer_data, 0.7) # splits the data
trainset <- splitteddata[[1]] # train set
testset <- splitteddata[[2]] # test set
SVM.prediction <- SVMclassifier(trainset, testset)
SVM.evaluation <- evaluateclassifier(SVM.prediction$cancer.probability, testset)
SVM_AUC[iterationindex] <- SVM.evaluation[[1]]
SVM_acc[iterationindex] <- SVM.evaluation[[2]]
SVM_specificity[iterationindex] <- SVM.evaluation[[3]]
SVM_sensitivity[iterationindex] <- SVM.evaluation[[4]]
SVM_PPV[iterationindex] <- SVM.evaluation[[5]]
SVM_NPV[iterationindex] <- SVM.evaluation[[6]]
list_models[[iterationindex]] <- SVM.prediction$SVMfit
vect_thresholds[iterationindex] <- SVM.evaluation$opt_threshold
}
c(mean(SVM_AUC) - qnorm(0.975) * sqrt(sd(SVM_AUC) / number.of.iterations), mean(SVM_AUC) + qnorm(0.975) * sqrt(sd(SVM_AUC) / number.of.iterations))
c(mean(SVM_sensitivity) - qnorm(0.975) * sqrt(sd(SVM_sensitivity) / number.of.iterations), mean(SVM_sensitivity) + qnorm(0.975) * sqrt(sd(SVM_sensitivity) / number.of.iterations))
c(mean(SVM_specificity) - qnorm(0.975) * sqrt(sd(SVM_specificity) / number.of.iterations), mean(SVM_specificity) + qnorm(0.975) * sqrt(sd(SVM_specificity) / number.of.iterations))
c(mean(SVM_acc) - qnorm(0.975) * sqrt(sd(SVM_acc) / number.of.iterations), mean(SVM_acc) + qnorm(0.975) * sqrt(sd(SVM_acc) / number.of.iterations))
## Save list of models and list of thresholds optimizing Younden's index
# saveRDS(list_models, file = "../../ebp/ebp_ensemble_svm_classifier")
# saveRDS(vect_thresholds, file = "../../ebp/vect_thresh_optim_younden_index")
cancer.probability<-predict(list_models[[500]], testset[c(-ncol(testset))], probability=TRUE)
cancer.probability=attr(cancer.probability, "prob")[,1]
binary.classification=as.numeric(cancer.probability>vect_thresholds[500])+1
testset$Classification
mean(binary.classification==testset$Classification)
plot(hist(vect_thresholds))
48*2
48*8
# library(xlsx)
library(randomForest)
# library(xlsx)
library(randomForest)
# library(xlsx)
library(randomForest)
library(e1071)
library(pROC)
library(dplyr)
# library(doBy)
library(ggplot2)
library(pscl)
library(data.table)
library(ResourceSelection)
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
source("splitter.R")
source("SVMclassifier.R")
source("evaluateclassifier.R")
# library(xlsx)
library(randomForest)
library(e1071)
library(pROC)
library(dplyr)
# library(doBy)
library(ggplot2)
library(pscl)
library(data.table)
library(ResourceSelection)
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
source("splitter.R")
source("SVMclassifier.R")
source("evaluateclassifier.R")
## Read data
cancer_data <- as.data.frame(fread("../prio_breast_cancer_train_data/dataR2_with_units.csv",
select = c(
"Glucose (mg/dL)", "Resistin (ng/mL)",
"Age (year)", "BMI (kg/m2)", "Classification"
)
))
View(cancer_data)
cancer_data$Classification
cor(cancer_data$Classification, cancer_data$`Resistin (ng/mL)`)
cor(cancer_data$Classification, cancer_data$`Glucose (mg/dL)`)
cor(cancer_data$Classification, cancer_data$`Age (year)`)
cor(cancer_data$Classification, cancer_data$`BMI (kg/m2)`)
cor(cancer_data$Classification, cancer_data$`Age (year)`)
plot(cancer_data$Classification, cancer_data$`Glucose (mg/dL)`)
plot(cancer_data$Classification, cancer_data$`Resistin (ng/mL)`)
styler:::style_active_file()
library(shiny); runApp('~/Documents/GAIHA/GAIHA_APPS/PRIO_RETINO/DR_APPS/prio_retino_apps/prio_retino/app_dr_glaucoma.R')
styler:::style_active_pkg()
styler:::style_active_file()
runApp('~/Documents/GAIHA/GAIHA_APPS/PRIO_RETINO/DR_APPS/prio_retino_apps/prio_retino/app_dr_glaucoma.R')
shiny::runApp()
