x<-x/255
Vect_pred_class_prob[i]<-as.numeric(model %>% predict(x))
Vect_pred_class_prob[i]
View(df_class_pred_prob)
truth
df_class_pred_prob<-data.frame('True_class'=as.factor(Vect_true_class), 'Pred_class'=as.factor(Vect_pred_class), 'Pred_class_prob'=as.numeric(Vect_pred_class_prob) )
df_class_pred_prob$True_class
factor(df_class_pred_prob$True_class, levels = rev(lvs))
mean(df_class_pred_prob$True_class==df_class_pred_prob$Pred_class)
df_class_pred_prob$Pred_class
conf_mat<-confusionMatrix(reference=df_class_pred_prob$True_class, df_class_pred_prob$Pred_class)
conf_mat
pROC_obj <- roc( response=as.factor(df_class_pred_prob$True_class), predictor=df_class_pred_prob$Pred_class_prob, smoothed = TRUE,
# arguments for ci
ci=TRUE, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE
)
sens.ci <- ci.se(pROC_obj)
plot(sens.ci, type="shape", col="lightblue")
#=========================================#
# Load packages and set working directory #
#=========================================#
library(rstudioapi)
library(ROCR)
library(pROC)
library(PRROC)
library(verification)
library(data.table)
library(tensorflow)
library(keras)
library(caret)
setwd(dirname(getActiveDocumentContext()$path))
img_size=299
img_path='../DR_DATA/CNN_BINARY_DATA_2/test_dir/'
model=load_model_hdf5('../DR_RECOG/diabetic_retinopathy_recognition/xception_binary_classifier_2_full_arch_avg_pool.h5')
Test_image_names<-list.files(img_path)
Test_image_labels<-as.data.frame(fread('../Test_image_labels_binary_data_2.csv'))
Vect_true_class<-Test_image_labels$level
Vect_pred_class<-rep('None', length(Test_image_names))
Vect_pred_class_prob<-rep(Inf, length(Test_image_names))
# Vect_true_class_pred_prob<-rep(Inf, length(Test_image_names))
for ( i in 1:length(Test_image_names) )
{
img <- image_load( paste0(img_path,Test_image_names[i]), target_size = c(img_size,img_size))
x <- image_to_array(img)
x <- array_reshape(x, c(1, dim(x)))
x<-x/255
Vect_pred_class_prob[i]<-as.numeric(model %>% predict(x))
ifelse( (Vect_pred_class_prob[i] > 0.5), Vect_pred_class[i]<-'severe_prolif_DR', Vect_pred_class[i]<-'moderate_DR' )
}
df_class_pred_prob<-data.frame('True_class'=as.factor(Vect_true_class), 'Pred_class'=as.factor(Vect_pred_class), 'Pred_class_prob'=as.numeric(Vect_pred_class_prob) )
lvs <- c("moderate_DR", "severe_prolif_DR")
truth<-factor(df_class_pred_prob$True_class, levels = rev(lvs))
pred<-factor(df_class_pred_prob$Pred_class, levels = rev(lvs))
conf_mat<-confusionMatrix(reference=truth, pred)
conf_mat
pROC_obj <- roc( response=as.factor(df_class_pred_prob$True_class), predictor=df_class_pred_prob$Pred_class_prob, smoothed = TRUE,
# arguments for ci
ci=TRUE, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE
)
sens.ci <- ci.se(pROC_obj)
plot(sens.ci, type="shape", col="lightblue")
Vect_id_moderate<-Test_image_labels$image_id[ which( (Vect_true_class=='moderate_DR')&(Vect_pred_class=='moderate_DR') ) ]
Vect_id_severe<-Test_image_labels$image_id[ which( (Vect_true_class=='severe_prolif_DR')&(Vect_pred_class=='severe_prolif_DR') ) ]
writeLines(Vect_id_moderate, '../DR_RECOG/Moderate_DR_images.txt')
writeLines(Vect_id_severe, '../DR_RECOG/Severe_prolif_DR_images.txt')
131/673
54/673
View(df_class_pred_prob)
Test_image_names
length(Test_image_names)
#=========================================#
# Load packages and set working directory #
#=========================================#
library(rstudioapi)
library(ROCR)
library(pROC)
library(PRROC)
library(verification)
library(data.table)
library(tensorflow)
library(keras)
library(caret)
setwd(dirname(getActiveDocumentContext()$path))
img_size=299
img_path='../DR_DATA/CNN_BINARY_DATA_2/test_dir/'
model=load_model_hdf5('../DR_RECOG/diabetic_retinopathy_recognition/xception_binary_classifier_2_full_arch_avg_pool.h5')
Test_image_names<-list.files(img_path)
Test_image_labels<-as.data.frame(fread('../Test_image_labels_binary_data_2.csv'))
Vect_true_class<-Test_image_labels$level
Vect_pred_class<-rep('None', length(Test_image_names))
Vect_pos_class_prob<-rep(Inf, length(Test_image_names))
# Vect_true_class_pred_prob<-rep(Inf, length(Test_image_names))
for ( i in 1:length(Test_image_names) )
{
img <- image_load( paste0(img_path,Test_image_names[i]), target_size = c(img_size,img_size))
x <- image_to_array(img)
x <- array_reshape(x, c(1, dim(x)))
x<-x/255
Vect_pos_class_prob[i]<-as.numeric(model %>% predict(x))
ifelse( (Vect_pos_class_prob[i] > 0.5), Vect_pred_class[i]<-'severe_prolif_DR', Vect_pred_class[i]<-'moderate_DR' )
}
df_class_pred_prob<-data.frame('True_class'=as.factor(Vect_true_class), 'Pred_class'=as.factor(Vect_pred_class), 'Pos_class_prob'=as.numeric(Vect_pos_class_prob) )
lvs <- c("moderate_DR", "severe_prolif_DR")
truth<-factor(df_class_pred_prob$True_class, levels = rev(lvs))
pred<-factor(df_class_pred_prob$Pred_class, levels = rev(lvs))
conf_mat<-confusionMatrix(reference=truth, pred)
conf_mat
pROC_obj <- roc( response=as.factor(df_class_pred_prob$True_class), predictor=df_class_pred_prob$Pos_class_prob, smoothed = TRUE,
# arguments for ci
ci=TRUE, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE
)
sens.ci <- ci.se(pROC_obj)
plot(sens.ci, type="shape", col="lightblue")
Vect_id_moderate<-Test_image_labels$image_id[ which( (Vect_true_class=='moderate_DR')&(Vect_pred_class=='moderate_DR') ) ]
Vect_id_severe<-Test_image_labels$image_id[ which( (Vect_true_class=='severe_prolif_DR')&(Vect_pred_class=='severe_prolif_DR') ) ]
writeLines(Vect_id_moderate, '../DR_RECOG/Moderate_DR_images.txt')
writeLines(Vect_id_severe, '../DR_RECOG/Severe_prolif_DR_images.txt')
shiny::runApp('~/Documents/TDS_PROJECTS/DR_PROJECT/DR_RECOG/3DR_GAIA/3DR_en')
install.packages("lime")
library(lime)
?plot_explanations
?plot_image_explanation
## Not run:
# load precalculated explanation as it takes a long time to create
explanation <- .load_image_example()
# Default
plot_image_explanation(explanation)
## Not run:
# load precalculated explanation as it takes a long time to create
explanation <- .load_image_example()
# Default
plot_image_explanation(explanation, which = 1)
## Not run:
# load precalculated explanation as it takes a long time to create
explanation <- .load_image_example()
# Default
plot_image_explanation(explanation)
gg_obj <- plot_image_explanation(explanation)
gg_obj
gg_obj[1]
#---------------------------------------------------------------------------------------------#
# Copyright (C) 2018,  Laval Yannis Julien Jacquin (i.e. Trust Data Science)                  #
#---------------------------------------------------------------------------------------------#
# This file is part of the PRIO_RETINO software                                               #
#                                                                                             #
# PRIO_RETINO software suite can be redistributed and/or modified under the terms of the      #
# GNU General Public License as published by the Free Software Foundation; either version 2   #
# of the License, or (at your option) any later version.                                      #
#                                                                                             #
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;   #
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   #
# See the GNU General Public License for more details.                                        #
#                                                                                             #
# You should have received a copy of the GNU General Public License along with this program;  #
# if not, write to the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,           #
# Boston, MA  02110-1301  USA                                                                 #
#---------------------------------------------------------------------------------------------#
library(data.table)
library(stringr)
library(rstudioapi)
library(fs)
# setwd(dirname(getActiveDocumentContext()$path))
path_files <- '/media/laval/SAUVEGARDE_KERIA/KER_IA/GAIHA/GAIHA_APPS/PRIO_RETINO/DR_DATA/CNN_BINARY_DATA_1/train_dir/train_non_rDR/'
setwd(path_files)
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
list_img_prio_retino <- list.files(recursive = TRUE)
length(list_img_prio_retino)
list_img_size_prio_retino <- sapply(list_img_prio_retino, file_size)
list_img_size_prio_retino <- list_img_size_prio_retino/1000
hist(list_img_size_prio_retino)
min(list_img_size_prio_retino)
max(list_img_size_prio_retino)
Mode(list_img_size_prio_retino)
q99_img_size <- quantile(list_img_size_prio_retino, probs = 0.99)
q99_img_size
#---------------------------------------------------------------------------------------------#
# Copyright (C) 2018,  Laval Yannis Julien Jacquin (i.e. Trust Data Science)                  #
#---------------------------------------------------------------------------------------------#
# This file is part of the PRIO_RETINO software                                               #
#                                                                                             #
# PRIO_RETINO software suite can be redistributed and/or modified under the terms of the      #
# GNU General Public License as published by the Free Software Foundation; either version 2   #
# of the License, or (at your option) any later version.                                      #
#                                                                                             #
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;   #
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   #
# See the GNU General Public License for more details.                                        #
#                                                                                             #
# You should have received a copy of the GNU General Public License along with this program;  #
# if not, write to the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,           #
# Boston, MA  02110-1301  USA                                                                 #
#---------------------------------------------------------------------------------------------#
library(data.table)
library(stringr)
library(rstudioapi)
library(fs)
# setwd(dirname(getActiveDocumentContext()$path))
path_files <- '/media/laval/SAUVEGARDE_KERIA/KER_IA/GAIHA/GAIHA_APPS/PRIO_RETINO/DR_DATA/CNN_BINARY_DATA_1/train_dir/train_non_rDR/'
setwd(path_files)
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
list_img_prio_retino <- list.files(recursive = TRUE)
length(list_img_prio_retino)
list_img_size_prio_retino <- sapply(list_img_prio_retino, file_size)
list_img_size_prio_retino <- list_img_size_prio_retino/1000
q99_img_size <- quantile(list_img_size_prio_retino, probs = 0.99)
q99_img_size
list_img_size_prio_retino <- list_img_size_prio_retino[list_img_size_prio_retino<700]
hist(list_img_size_prio_retino)
min(list_img_size_prio_retino)
max(list_img_size_prio_retino)
Mode(list_img_size_prio_retino)
#---------------------------------------------------------------------------------------------#
# Copyright (C) 2018,  Laval Yannis Julien Jacquin (i.e. Trust Data Science)                  #
#---------------------------------------------------------------------------------------------#
# This file is part of the PRIO_RETINO software                                               #
#                                                                                             #
# PRIO_RETINO software suite can be redistributed and/or modified under the terms of the      #
# GNU General Public License as published by the Free Software Foundation; either version 2   #
# of the License, or (at your option) any later version.                                      #
#                                                                                             #
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;   #
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   #
# See the GNU General Public License for more details.                                        #
#                                                                                             #
# You should have received a copy of the GNU General Public License along with this program;  #
# if not, write to the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,           #
# Boston, MA  02110-1301  USA                                                                 #
#---------------------------------------------------------------------------------------------#
library(data.table)
library(stringr)
library(rstudioapi)
library(fs)
# setwd(dirname(getActiveDocumentContext()$path))
path_files <- '/media/laval/SAUVEGARDE_KERIA/KER_IA/GAIHA/GAIHA_APPS/PRIO_RETINO/DR_DATA/CNN_BINARY_DATA_1/train_dir/train_non_rDR/'
setwd(path_files)
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
list_img_prio_retino <- list.files(recursive = TRUE)
length(list_img_prio_retino)
list_img_size_prio_retino <- sapply(list_img_prio_retino, file_size)
list_img_size_prio_retino <- list_img_size_prio_retino/1000
q99_img_size <- quantile(list_img_size_prio_retino, probs = 0.99)
q99_img_size
list_img_size_prio_retino <- list_img_size_prio_retino[list_img_size_prio_retino<750]
hist(list_img_size_prio_retino)
min(list_img_size_prio_retino)
max(list_img_size_prio_retino)
Mode(list_img_size_prio_retino)
?hist
hist(list_img_size_prio_retino, ylab="Nombre d'images",
xlab="Taille d'image en Ko", col='green')
hist(list_img_size_prio_retino, ylab="Nombre d'images",
xlab="Taille d'image en Ko", col='green',
main ="Histogramme d'images utilisées pour \n l'apprentissage de Gaiha Prio Retino")
dev.new()
hist(list_img_size_prio_retino, ylab="Nombre d'images",
xlab="Taille d'image en Ko", col='green',
main ="Histogramme d'images utilisées pour \n l'apprentissage de Gaiha Prio Retino")
dev.new()
hist(list_img_size_prio_retino, ylab="Nombre d'images",
xlab="Taille d'image en Ko", col='green',
main ="Histogramme des tailles d'images utilisées pour \n l'apprentissage de Gaiha Prio Retino")
dev.new()
hist(list_img_size_prio_retino, ylab="Nombre d'images",
xlab="Taille d'image en Ko", col='green',
main ="Histogramme des tailles d'images utilisées \n pour l'apprentissage de Gaiha Prio Retino")
0.75*1024^2
0.7*1024^2
750000
install.packages("styler")
styler:::style_active_file()
library(shiny); runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
library(shiny); runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
library(shiny); runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
library(shiny); runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
library(doParallel)
cl <- makeCluster(detectCores())
registerDoParallel(cl)
runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
#---------------------------------------------------------------------------------------------#
# Copyright (C) 2018,  Laval Yannis Julien Jacquin (i.e. Trust Data Science)                  #
#---------------------------------------------------------------------------------------------#
# This file is part of the Prio Retino software                                               #
#                                                                                             #
# Prio Retino software suite can be redistributed and/or modified under the terms of the      #
# GNU General Public License as published by the Free Software Foundation; either version 2   #
# of the License, or (at your option) any later version.                                      #
#                                                                                             #
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;   #
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   #
# See the GNU General Public License for more details.                                        #
#                                                                                             #
# You should have received a copy of the GNU General Public License along with this program;  #
# if not, write to the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,           #
# Boston, MA  02110-1301  USA                                                                 #
#---------------------------------------------------------------------------------------------#
options(rlib_downstream_check = FALSE)
# configure multicore
library(doParallel)
cl <- makeCluster(detectCores())
detectCores()
library(shiny); runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
?explain
?explain
runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
?explain.imagefile
runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
?explain.data.frame
runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
library(shiny); runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
library(shiny); runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
library(reticulate)
packageVersion('reticulate')
?conda_create
library(shiny); runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
library(shiny); runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
styler:::style_active_file()
library(shiny); runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
"abc"
"abc" !=""
"abc" != ""
length("abc")
runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
file.exists("www/grad_cam_transformed_target_image.jpg")
list.files()
library(shiny); runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
toto
runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
toto
toto$size
unlist(toto)
unlist(toto)$size
as.numeric(rv$file1$size)>1
as.numeric(toto$size)>1
library(shiny); runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
?noquote
noquote("'hello")
noquote("'hello'")
gsub("'","", "'oeil droit'")
library(shiny); runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
tolower('HElloasaA')
?tolower
styler:::style_active_file()
runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
runApp('Documents/gaiha/prio_retino_apps/prio_retino/app_local.R')
styler:::style_active_file()
runApp('Documents/gaiha/prio_retino_apps/prio_retino')
3*42
library(stringr)
str_trim(tolower(gsub("'", "", unlist(rv$eye_side))), side="both")
str_trim(tolower(gsub("'", "", "'Oeil Droit '")), side="both")
styler:::style_active_file()
shiny::runApp('Documents/gaiha/prio_retino_apps/prio_retino')
tmpfile <- list_out_prio_retino()$grad_cam_transformed_target_image %>%
image_write(tempfile(fileext='jpg'), format = 'jpg')
runApp('Documents/gaiha/prio_retino_apps/prio_retino')
shiny::runApp('Documents/gaiha/prio_retino_apps/prio_retino')
shiny::runApp('Documents/gaiha/prio_retino_apps/prio_retino')
shiny::runApp('Documents/gaiha/prio_retino_apps/prio_retino')
shiny::runApp('Documents/gaiha/prio_retino_apps/prio_retino')
#---------------------------------------------------------------------------------------------#
# Copyright (C) 2022, Gaiha, Author:  Laval Yannis Julien Jacquin                             #
#---------------------------------------------------------------------------------------------#
# This file is part of the Prio Retino software                                               #
#                                                                                             #
# Prio Retino software suite can be redistributed and/or modified under the terms of the      #
# GNU General Public License as published by the Free Software Foundation; either version 2   #
# of the License, or (at your option) any later version.                                      #
#                                                                                             #
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;   #
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   #
# See the GNU General Public License for more details.                                        #
#                                                                                             #
# You should have received a copy of the GNU General Public License along with this program;  #
# if not, write to the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,           #
# Boston, MA  02110-1301  USA                                                                 #
#---------------------------------------------------------------------------------------------#
options(rlib_downstream_check = FALSE)
library(devtools)
library(reticulate)
install_tensorflow_python_packages <- FALSE
if (install_tensorflow_python_packages) {
install_miniconda(path = miniconda_path(), update = TRUE, force = FALSE)
conda_create("prio_retino", python_version = "3.10")
use_condaenv(condaenv = "prio_retino")
library(tensorflow)
install_tensorflow(version = "2.11.0", envname = "prio_retino")
py_install("image-quality-1.2.7/", envname = "prio_retino", pip = TRUE)
# if command above does not work use the following in shell
# sudo /home/shiny/.local/share/r-miniconda/envs/prio_retino/bin/python -m pip install -e image-quality-1.2.7/
py_install("matplotlib", envname = "prio_retino", pip = TRUE)
py_install("opencv-python~=3.4.2", envname = "prio_retino", pip = TRUE)
py_install("h5py~=3.7.0", envname = "prio_retino", pip = TRUE)
py_config()
py_available()
py_module_available("cv2")
py_module_available("imquality")
}
use_condaenv(condaenv = "prio_retino")
cv2 <- import("cv2")
imquality <- import("imquality")
library(tensorflow)
library(keras)
library(shiny)
library(shinyjs)
library(V8)
library(magick)
library(imager)
library(viridis)
library(data.table)
library(png)
library(stringr)
library(shinymanager)
library(shinycustomloader)
library(shiny.i18n)
library(shinyWidgets)
library(spatstat)
# library(rstudioapi)
# setwd(dirname(getActiveDocumentContext()$path))
options(encoding = "UTF-8")
source_python("resize_image.py")
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
options(encoding = "UTF-8")
source_python("resize_image.py")
source_python("grad_cam_2.py")
source_python("compute_image_brisque_score.py")
resize_image(name = 'www/image_test_1_opt.jpg', desired_size = desired_size)
desired_size = 1024
resize_image(name = 'www/image_test_1_opt.jpg', desired_size = desired_size)
list_out_prio_retino$resized_cropped_target_image <- image_read("www/resized_cropped_target_image.jpg")
# initialize an empty list for prio retino outputs
list_out_prio_retino <- list(
resized_cropped_target_image = NULL,
transformed_target_image = NULL,
resized_transformed_target_image = NULL,
grad_cam_transformed_target_image = NULL,
out_prio_retino_txt = NULL
)
transformed_target_image <- image_scale(list_out_prio_retino$resized_cropped_target_image, desired_size)
list_out_prio_retino$resized_cropped_target_image <- image_read("www/resized_cropped_target_image.jpg")
transformed_target_image <- image_scale(list_out_prio_retino$resized_cropped_target_image, desired_size)
magick::image_ggplot(transformed_target_image)
transformed_target_image <- image_resize(transformed_target_image, desired_size)
magick::image_ggplot(transformed_target_image)
transformed_target_image <- magick2cimg(transformed_target_image)
magick::image_ggplot(transformed_target_image)
plot(transformed_target_image)
Blur_target_img <- boxblur(transformed_target_image, blur_factor)
blur_factor <<- 100
Blur_target_img <- boxblur(transformed_target_image, blur_factor)
plot(Blur_target_img)
transformed_target_image <- transformed_target_image - Blur_target_img
plot(transformed_target_image)
?boxblur
transformed_target_image <- image_scale(list_out_prio_retino$resized_cropped_target_image, desired_size)
transformed_target_image <- image_resize(transformed_target_image, desired_size)
transformed_target_image <- magick2cimg(transformed_target_image)
Gauss_blur_img <- blur(transformed_target_image)
Gauss_blur_img <- blur(transformed_target_image, sigma = 0.5)
transformed_target_image <- image_scale(list_out_prio_retino$resized_cropped_target_image, desired_size)
transformed_target_image <- image_resize(transformed_target_image, desired_size)
transformed_target_image <- magick2cimg(transformed_target_image)
Blur_target_img = cannyEdges(transformed_target_image)
plot(Blur_target_img)
transformed_target_image <- transformed_target_image - Blur_target_img
plot(transformed_target_image)
