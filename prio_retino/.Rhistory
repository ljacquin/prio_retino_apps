source_python("grad_cam_2.py")
source_python("compute_image_brisque_score.py")
# Set countries languages
countries <- c(
"English", "Français",
"Português"
)
flags <- c(
"us.png", "french.png",
"portugal.png"
)
# File with translations
i18n <- Translator$new(translation_json_path = "prio_retino_translation.json")
i18n$set_translation_language("English")
#####################
#### Credentials ####
#####################
tryCatch(
{
prio_retino_credentials <<- as.data.frame(fread("../prio_retino_credential_usage/prio_retino_credential_usage.csv",
header = TRUE
))
fwrite(prio_retino_credentials, file = "../prio_retino_credential_usage/prio_retino_credential_usage_save.csv")
},
error = function(err) {
prio_retino_credentials <<- as.data.frame(fread("../prio_retino_credential_usage/prio_retino_credential_usage_save.csv",
header = TRUE
))
}
)
# data.frame with credentials info
credentials <- data.frame(
user = prio_retino_credentials$Login,
password = prio_retino_credentials$Password,
stringsAsFactors = FALSE
)
#########################################
### Prio Retino models and parameters ###
#########################################
# CNN model and parameters
if (!exists("cnn_binary_classifier_1") && !exists("cnn_binary_classifier_2") && !exists("cnn_binary_classifier_3") &&
!exists("cnn_binary_classifier_4") && !exists("cnn_binary_classifier_5")
) {
cnn_binary_classifier_1 <<- load_model("xception_binary_classifier_1_full_arch_avg_pool_ratio_10_1_epochs_11.h5")
cnn_binary_classifier_2 <<- load_model("xception_binary_classifier_2_full_arch_avg_pool_ratio_2_1_epochs_9.h5")
cnn_binary_classifier_3 <<- load_model("xception_binary_classifier_3_full_arch_avg_pool.h5")
cnn_binary_classifier_4 <<- load_model("xception_binary_classifier_4_full_arch_avg_pool.h5")
cnn_binary_classifier_5 <<- load_model("xception_binary_classifier_5_full_arch_avg_pool_augment_new_data_ratio_10_1_epochs_7.h5")
}
img_size_cnn <<- as.numeric(scan("img_size_cnn.txt"))
# Raw image parameters
desired_size <<- 1024
blur_factor <<- 100
# Output image parameters
width_img_size <<- 540
height_img_size <<- 450
# grad-cam parameter
last_conv_layer_name <<- "block14_sepconv2_act"
# compute quality
compute_quality <<- FALSE
# convert output images to low quality to increase rendering speed
convert_magick2cimg <<- TRUE
annotation_color_ <<- ifelse(convert_magick2cimg,
"none", "none"
)
# Loading CSS content
appCSS <- "
#loading-content {
position: absolute;
background: #000000;
opacity: 0.9;
z-index: 100;
left: 0;
right: 0;
height: 100%;
text-align: center;
color: #FFFFFF;
}
"
resize_image_2('www/test_img.png', desired_size_ = desired_size)
source_python("resize_image_2.py")
resize_image_2('www/test_img.png', desired_size_ = desired_size)
pil_img = resize_image_2('www/test_img.png', desired_size_ = desired_size)
test = image_read(pil_img)
as.raster(pil_img)
?as.raster
source_python("resize_image_2.py")
arr_ = resize_image_2('www/test_img.png', desired_size_ = desired_size)
arr_
test = image_read(arr_)
test = image_read(as.raster(arr_)))
test = image_read(as.raster(arr_))
?image_laod
?image_load
runApp()
#---------------------------------------------------------------------------------------------#
# Copyright (C) 2022, Gaiha, Author:  Laval Yannis Julien Jacquin                             #
#---------------------------------------------------------------------------------------------#
# This file is part of the Prio Retino software                                               #
#                                                                                             #
# Prio Retino software suite can be redistributed and/or modified under the terms of the      #
# GNU General Public License as published by the Free Software Foundation; either version 2   #
# of the License, or (at your option) any later version.                                      #
#                                                                                             #
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;   #
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   #
# See the GNU General Public License for more details.                                        #
#                                                                                             #
# You should have received a copy of the GNU General Public License along with this program;  #
# if not, write to the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,           #
# Boston, MA  02110-1301  USA                                                                 #
#---------------------------------------------------------------------------------------------#
options(rlib_downstream_check = FALSE)
library(devtools)
library(reticulate)
install_tensorflow_python_packages <- FALSE
if (install_tensorflow_python_packages) {
install_miniconda(path = miniconda_path(), update = TRUE, force = FALSE)
conda_create("prio_retino", python_version = "3.10")
use_condaenv(condaenv = "prio_retino")
library(tensorflow)
install_tensorflow(version = "2.11.0", envname = "prio_retino")
py_install("image-quality-1.2.7/", envname = "prio_retino", pip = TRUE)
# if command above does not work use the following in shell
# sudo /home/shiny/.local/share/r-miniconda/envs/prio_retino/bin/python -m pip install -e image-quality-1.2.7/
py_install("matplotlib", envname = "prio_retino", pip = TRUE)
py_install("opencv-python~=3.4.2", envname = "prio_retino", pip = TRUE)
py_install("h5py~=3.7.0", envname = "prio_retino", pip = TRUE)
py_config()
py_available()
py_module_available("cv2")
py_module_available("imquality")
}
use_condaenv(condaenv = "prio_retino")
cv2 <- import("cv2")
imquality <- import("imquality")
library(tensorflow)
library(keras)
library(shiny)
library(shinyjs)
library(V8)
library(magick)
library(imager)
library(viridis)
library(data.table)
library(png)
library(stringr)
library(shinymanager)
library(shinycustomloader)
library(shiny.i18n)
library(shinyWidgets)
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
source_python("img_resize_quality_functions.py")
source_python("grad_cam_functions.py")
options(encoding = "UTF-8")
source_python("img_resize_quality_functions.py")
source_python("grad_cam_functions.py")
compute_resize_quality_img('www/resized_cropped_target_image.png', img_size_qual=150, desired_size=1024)
test = compute_resize_quality_img('www/resized_cropped_target_image.png', img_size_qual=150, desired_size=1024)
compute_resize_quality_img('www/resized_cropped_target_image.png', img_size_qual=150, desired_size=1024)
source('img_resize_quality_functions.py')
compute_resize_quality_img
getwd()
list.files()
compute_resize_quality_img('www/resized_cropped_target_image.png', img_size_qual=150, desired_size=1024)
# Raw image parameters
desired_size <<- 1024
img_size_qual <<- 150
blur_factor <<- 100
#---------------------------------------------------------------------------------------------#
# Copyright (C) 2022, Gaiha, Author:  Laval Yannis Julien Jacquin                             #
#---------------------------------------------------------------------------------------------#
# This file is part of the Prio Retino software                                               #
#                                                                                             #
# Prio Retino software suite can be redistributed and/or modified under the terms of the      #
# GNU General Public License as published by the Free Software Foundation; either version 2   #
# of the License, or (at your option) any later version.                                      #
#                                                                                             #
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;   #
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   #
# See the GNU General Public License for more details.                                        #
#                                                                                             #
# You should have received a copy of the GNU General Public License along with this program;  #
# if not, write to the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,           #
# Boston, MA  02110-1301  USA                                                                 #
#---------------------------------------------------------------------------------------------#
options(rlib_downstream_check = FALSE)
library(devtools)
library(reticulate)
install_tensorflow_python_packages <- FALSE
if (install_tensorflow_python_packages) {
install_miniconda(path = miniconda_path(), update = TRUE, force = FALSE)
conda_create("prio_retino", python_version = "3.10")
use_condaenv(condaenv = "prio_retino")
library(tensorflow)
install_tensorflow(version = "2.11.0", envname = "prio_retino")
py_install("image-quality-1.2.7/", envname = "prio_retino", pip = TRUE)
# if command above does not work use the following in shell
# sudo /home/shiny/.local/share/r-miniconda/envs/prio_retino/bin/python -m pip install -e image-quality-1.2.7/
py_install("matplotlib", envname = "prio_retino", pip = TRUE)
py_install("opencv-python~=3.4.2", envname = "prio_retino", pip = TRUE)
py_install("h5py~=3.7.0", envname = "prio_retino", pip = TRUE)
py_config()
py_available()
py_module_available("cv2")
py_module_available("imquality")
}
use_condaenv(condaenv = "prio_retino")
cv2 <- import("cv2")
imquality <- import("imquality")
library(tensorflow)
library(keras)
library(shiny)
library(shinyjs)
library(V8)
library(magick)
library(imager)
library(viridis)
library(data.table)
library(png)
library(stringr)
library(shinymanager)
library(shinycustomloader)
library(shiny.i18n)
library(shinyWidgets)
# library(rstudioapi)
# setwd(dirname(getActiveDocumentContext()$path))
options(encoding = "UTF-8")
source_python("img_resize_quality_functions.py")
source_python("grad_cam_functions.py")
# Set countries languages
countries <- c(
"English", "Français",
"Português"
)
flags <- c(
"us.png", "french.png",
"portugal.png"
)
# File with translations
i18n <- Translator$new(translation_json_path = "prio_retino_translation.json")
i18n$set_translation_language("English")
#####################
#### Credentials ####
#####################
tryCatch(
{
prio_retino_credentials <<- as.data.frame(fread("../prio_retino_credential_usage/prio_retino_credential_usage.csv",
header = TRUE
))
fwrite(prio_retino_credentials, file = "../prio_retino_credential_usage/prio_retino_credential_usage_save.csv")
},
error = function(err) {
prio_retino_credentials <<- as.data.frame(fread("../prio_retino_credential_usage/prio_retino_credential_usage_save.csv",
header = TRUE
))
}
)
# data.frame with credentials info
credentials <- data.frame(
user = prio_retino_credentials$Login,
password = prio_retino_credentials$Password,
stringsAsFactors = FALSE
)
#########################################
### Prio Retino models and parameters ###
#########################################
# CNN model and parameters
if (!exists("cnn_binary_classifier_1") && !exists("cnn_binary_classifier_2") && !exists("cnn_binary_classifier_3") &&
!exists("cnn_binary_classifier_4") && !exists("cnn_binary_classifier_5")
) {
cnn_binary_classifier_1 <<- load_model("xception_binary_classifier_1_full_arch_avg_pool_ratio_10_1_epochs_11.h5")
cnn_binary_classifier_2 <<- load_model("xception_binary_classifier_2_full_arch_avg_pool_ratio_2_1_epochs_9.h5")
cnn_binary_classifier_3 <<- load_model("xception_binary_classifier_3_full_arch_avg_pool.h5")
cnn_binary_classifier_4 <<- load_model("xception_binary_classifier_4_full_arch_avg_pool.h5")
cnn_binary_classifier_5 <<- load_model("xception_binary_classifier_5_full_arch_avg_pool_augment_new_data_ratio_10_1_epochs_7.h5")
}
img_size_cnn <<- as.numeric(scan("img_size_cnn.txt"))
# Raw image parameters
desired_size <<- 1024
img_size_qual <<- 150
blur_factor <<- 100
# Output image parameters
width_img_size <<- 540
height_img_size <<- 450
# grad-cam parameter
last_conv_layer_name <<- "block14_sepconv2_act"
# compute quality
compute_quality <<- FALSE
# convert output images to low quality to increase rendering speed
convert_magick2cimg <<- TRUE
annotation_color_ <<- "none"  #render in white
# Loading CSS content
appCSS <- "
#loading-content {
position: absolute;
background: #000000;
opacity: 0.9;
z-index: 100;
left: 0;
right: 0;
height: 100%;
text-align: center;
color: #FFFFFF;
}
"
#---------------------------------------------------------------------------------------------#
# Copyright (C) 2022, Gaiha, Author:  Laval Yannis Julien Jacquin                             #
#---------------------------------------------------------------------------------------------#
# This file is part of the Prio Retino software                                               #
#                                                                                             #
# Prio Retino software suite can be redistributed and/or modified under the terms of the      #
# GNU General Public License as published by the Free Software Foundation; either version 2   #
# of the License, or (at your option) any later version.                                      #
#                                                                                             #
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;   #
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   #
# See the GNU General Public License for more details.                                        #
#                                                                                             #
# You should have received a copy of the GNU General Public License along with this program;  #
# if not, write to the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,           #
# Boston, MA  02110-1301  USA                                                                 #
#---------------------------------------------------------------------------------------------#
options(rlib_downstream_check = FALSE)
library(devtools)
library(reticulate)
install_tensorflow_python_packages <- FALSE
if (install_tensorflow_python_packages) {
install_miniconda(path = miniconda_path(), update = TRUE, force = FALSE)
conda_create("prio_retino", python_version = "3.10")
use_condaenv(condaenv = "prio_retino")
library(tensorflow)
install_tensorflow(version = "2.11.0", envname = "prio_retino")
py_install("image-quality-1.2.7/", envname = "prio_retino", pip = TRUE)
# if command above does not work use the following in shell
# sudo /home/shiny/.local/share/r-miniconda/envs/prio_retino/bin/python -m pip install -e image-quality-1.2.7/
py_install("matplotlib", envname = "prio_retino", pip = TRUE)
py_install("opencv-python~=3.4.2", envname = "prio_retino", pip = TRUE)
py_install("h5py~=3.7.0", envname = "prio_retino", pip = TRUE)
py_config()
py_available()
py_module_available("cv2")
py_module_available("imquality")
}
use_condaenv(condaenv = "prio_retino")
cv2 <- import("cv2")
imquality <- import("imquality")
library(tensorflow)
library(keras)
library(shiny)
library(shinyjs)
library(V8)
library(magick)
library(imager)
library(viridis)
library(data.table)
library(png)
library(stringr)
library(shinymanager)
library(shinycustomloader)
library(shiny.i18n)
library(shinyWidgets)
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
options(encoding = "UTF-8")
source_python("img_resize_quality_functions.py")
source_python("grad_cam_functions.py")
# Set countries languages
countries <- c(
"English", "Français",
"Português"
)
flags <- c(
"us.png", "french.png",
"portugal.png"
)
# File with translations
i18n <- Translator$new(translation_json_path = "prio_retino_translation.json")
i18n$set_translation_language("English")
#####################
#### Credentials ####
#####################
tryCatch(
{
prio_retino_credentials <<- as.data.frame(fread("../prio_retino_credential_usage/prio_retino_credential_usage.csv",
header = TRUE
))
fwrite(prio_retino_credentials, file = "../prio_retino_credential_usage/prio_retino_credential_usage_save.csv")
},
error = function(err) {
prio_retino_credentials <<- as.data.frame(fread("../prio_retino_credential_usage/prio_retino_credential_usage_save.csv",
header = TRUE
))
}
)
# data.frame with credentials info
credentials <- data.frame(
user = prio_retino_credentials$Login,
password = prio_retino_credentials$Password,
stringsAsFactors = FALSE
)
#########################################
### Prio Retino models and parameters ###
#########################################
# CNN model and parameters
if (!exists("cnn_binary_classifier_1") && !exists("cnn_binary_classifier_2") && !exists("cnn_binary_classifier_3") &&
!exists("cnn_binary_classifier_4") && !exists("cnn_binary_classifier_5")
) {
cnn_binary_classifier_1 <<- load_model("xception_binary_classifier_1_full_arch_avg_pool_ratio_10_1_epochs_11.h5")
cnn_binary_classifier_2 <<- load_model("xception_binary_classifier_2_full_arch_avg_pool_ratio_2_1_epochs_9.h5")
cnn_binary_classifier_3 <<- load_model("xception_binary_classifier_3_full_arch_avg_pool.h5")
cnn_binary_classifier_4 <<- load_model("xception_binary_classifier_4_full_arch_avg_pool.h5")
cnn_binary_classifier_5 <<- load_model("xception_binary_classifier_5_full_arch_avg_pool_augment_new_data_ratio_10_1_epochs_7.h5")
}
img_size_cnn <<- as.numeric(scan("img_size_cnn.txt"))
# Raw image parameters
desired_size <<- 1024
img_size_qual <<- 150
blur_factor <<- 100
# Output image parameters
width_img_size <<- 540
height_img_size <<- 450
# grad-cam parameter
last_conv_layer_name <<- "block14_sepconv2_act"
# compute quality
compute_quality <<- FALSE
# convert output images to low quality to increase rendering speed
convert_magick2cimg <<- TRUE
annotation_color_ <<- "none"  #render in white
# Loading CSS content
appCSS <- "
#loading-content {
position: absolute;
background: #000000;
opacity: 0.9;
z-index: 100;
left: 0;
right: 0;
height: 100%;
text-align: center;
color: #FFFFFF;
}
"
compute_resize_quality_img('www/resized_cropped_target_image.png',
img_size_qual=img_size_qual, desired_size=desired_size)
source('img_resize_quality_functions.py')
list.files()
source_python("img_resize_quality_functions.py")
compute_resize_quality_img('www/resized_cropped_target_image.png',
img_size_qual=img_size_qual, desired_size=desired_size)
out_resize_qual = compute_resize_quality_img('www/resized_cropped_target_image.png',
img_size_qual=img_size_qual, desired_size=desired_size)
out_resize_qual = compute_resize_quality_img('www/resized_cropped_target_image.png',
img_size_qual=img_size_qual, desired_size=desired_size)
out_resize_qual = compute_resize_quality_img('www/resized_cropped_target_image.png',
img_size_qual=img_size_qual, desired_size=desired_size)
out_resize_qual
out_resize_qual$temp_resize_img
out_resize_qual$img_qual_score
typeof(out_resize_qual$img_qual_score)
typeof(out_resize_qual$temp_resize_img)
out_resize_qual$temp_resize_img
out_resize_qual$temp_resize_img
file.remove(out_resize_qual$temp_resize_img)
out_resize_qual$img_qual_score
as.numeric(out_resize_qual$img_qual_score) < 0.48
ifelse(as.numeric(out_resize_qual$img_qual_score) < 0.48, img_qual <- 1, img_qual <- 0)
#---------------------------------------------------------------------------------------------#
# Copyright (C) 2018,  Laval Yannis Julien Jacquin (i.e. Trust Data Science)                  #
#---------------------------------------------------------------------------------------------#
# This file is part of the PRIO_RETINO software                                               #
#                                                                                             #
# PRIO_RETINO software suite can be redistributed and/or modified under the terms of the      #
# GNU General Public License as published by the Free Software Foundation; either version 2   #
# of the License, or (at your option) any later version.                                      #
#                                                                                             #
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;   #
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   #
# See the GNU General Public License for more details.                                        #
#                                                                                             #
# You should have received a copy of the GNU General Public License along with this program;  #
# if not, write to the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,           #
# Boston, MA  02110-1301  USA                                                                 #
#---------------------------------------------------------------------------------------------#
library(data.table)
library(stringr)
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
df_img_score <- as.data.frame(fread('compute_image_quality/image_size_150_brisque_score.csv'))
df_img_score$quality <- 0
dev.new()
hist(df_img_score$score, xlim = c(-20,100))
# df_img_score_2 <- as.data.frame(fread('compute_image_quality/Image_brisque_score.csv'))
# df_img_score_2$quality <- 0
# par(mfrow=c(2,1))
# hist(df_img_score$score, xlim = c(-20,100))
# hist(df_img_score_2$score, xlim = c(-20,100))
score_thresh <- ceiling(quantile(df_img_score$score, probs = 0.97))
score_thresh
qual_tresh <<- 32
ifelse(as.numeric(out_resize_qual$img_qual_score) < img_qual_tresh, img_qual <- 1, img_qual <- 0)
img_qual_tresh <<- 32
ifelse(as.numeric(out_resize_qual$img_qual_score) < img_qual_tresh, img_qual <- 1, img_qual <- 0)
!img_qual
out_resize_qual = compute_resize_quality_img(filename = rv$file1$datapath, img_size_qual=img_size_qual, desired_size=desired_size)
out_resize_qual = compute_resize_quality_img(filename = 'Compatibility_table_tensorflow_keras_python3.6.png', img_size_qual=img_size_qual, desired_size=desired_size)
runApp('prio_retino')
