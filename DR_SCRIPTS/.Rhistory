1e-5
0.000001
0.00001
#=========================================#
# Load packages and set working directory #
#=========================================#
library(devtools)
library(data.table)
library(rstudioapi)
library(reticulate)
library(tensorflow)
library(keras)
# library(magick)
library(stringr)
library(viridis)
library(caret)
# options(tensorflow.extract.one_based = FALSE)
use_session_with_seed(1, disable_gpu=FALSE, disable_parallel_cpu=FALSE)
# setwd(dirname(getActiveDocumentContext()$path))
# py_module_available('keras') # must return TRUE
# py_module_available('tensorflow') # must return TRUE
# py_discover_config("keras") # more info on the python env, tf and keras
#=====================================================================#
# Resize image, instantiate the VGG16 model and add new layers on top #
#=====================================================================#
img_size_cnn=299
batch_size_val=10
base_conv_model <- application_xception(
weights = "imagenet",
include_top = FALSE,
input_shape = c(img_size_cnn, img_size_cnn, 3)
)
unfreeze_weights(base_conv_model, from = "block3_sepconv1_act")
base_conv_model
#=========================================#
# Load packages and set working directory #
#=========================================#
library(devtools)
library(data.table)
library(rstudioapi)
library(reticulate)
library(tensorflow)
library(keras)
# library(magick)
library(stringr)
library(viridis)
library(caret)
# options(tensorflow.extract.one_based = FALSE)
use_session_with_seed(1, disable_gpu=FALSE, disable_parallel_cpu=FALSE)
# setwd(dirname(getActiveDocumentContext()$path))
# py_module_available('keras') # must return TRUE
# py_module_available('tensorflow') # must return TRUE
# py_discover_config("keras") # more info on the python env, tf and keras
#=====================================================================#
# Resize image, instantiate the VGG16 model and add new layers on top #
#=====================================================================#
img_size_cnn=299
batch_size_val=10
base_conv_model <- application_xception(
weights = "imagenet",
include_top = FALSE,
input_shape = c(img_size_cnn, img_size_cnn, 3)
)
unfreeze_weights(base_conv_model, from = "block7_sepconv1_act")
#--------------------#
# Model architecture #
#--------------------#
input_tensor   <- layer_input(shape = list(img_size_cnn, img_size_cnn, 3), name = "input_tensor")
output_tensor  <- input_tensor %>%
base_conv_model %>%
layer_max_pooling_2d(pool_size = c(2,2)) %>%
layer_dense(units = 2048, activation = "relu", name='fc1') %>%
layer_dropout(rate = 0.3, name='dropout1', seed=1) %>%
layer_dense(units = 1024, activation = "relu", name='fc2') %>%
layer_dropout(rate = 0.3, name='dropout2', seed=1) %>%
layer_dense(units = 512, activation = "relu", name='fc3') %>%
layer_dense(units = 1, activation = "sigmoid", name='fc4')
model<- keras_model(input_tensor, output_tensor)
#=========================================#
# Load packages and set working directory #
#=========================================#
library(devtools)
library(data.table)
library(rstudioapi)
library(reticulate)
library(tensorflow)
library(keras)
# library(magick)
library(stringr)
library(viridis)
library(caret)
# options(tensorflow.extract.one_based = FALSE)
use_session_with_seed(1, disable_gpu=FALSE, disable_parallel_cpu=FALSE)
# setwd(dirname(getActiveDocumentContext()$path))
# py_module_available('keras') # must return TRUE
# py_module_available('tensorflow') # must return TRUE
# py_discover_config("keras") # more info on the python env, tf and keras
#=====================================================================#
# Resize image, instantiate the VGG16 model and add new layers on top #
#=====================================================================#
img_size_cnn=299
batch_size_val=10
base_conv_model <- application_xception(
weights = "imagenet",
include_top = FALSE,
input_shape = c(img_size_cnn, img_size_cnn, 3)
)
unfreeze_weights(base_conv_model, from = "block7_sepconv1_act")
base_conv_model
getwd()
shiny::runApp('Documents/TDS_PROJECTS/DR_PROJECT/DR_RECOG/diabetic_retinopathy_recognition')
runApp('Documents/TDS_PROJECTS/DR_PROJECT/DR_RECOG/diabetic_retinopathy_recognition')
runApp('Documents/TDS_PROJECTS/DR_PROJECT/DR_RECOG/diabetic_retinopathy_recognition')
runApp('Documents/TDS_PROJECTS/DR_PROJECT/DR_RECOG/diabetic_retinopathy_recognition')
runApp('Documents/TDS_PROJECTS/DR_PROJECT/DR_RECOG/diabetic_retinopathy_recognition')
runApp('Documents/TDS_PROJECTS/DR_PROJECT/DR_RECOG/diabetic_retinopathy_recognition')
shiny::runApp('Documents/TDS_PROJECTS/DR_PROJECT/DR_RECOG/diabetic_retinopathy_recognition')
runApp('Documents/TDS_PROJECTS/DR_PROJECT/DR_RECOG/diabetic_retinopathy_recognition')
runApp('Documents/TDS_PROJECTS/DR_PROJECT/DR_RECOG/diabetic_retinopathy_recognition')
shiny::runApp('Documents/TDS_PROJECTS/DR_PROJECT/DR_RECOG/diabetic_retinopathy_recognition')
runApp('Documents/TDS_PROJECTS/DR_PROJECT/DR_RECOG/diabetic_retinopathy_recognition')
runApp('Documents/TDS_PROJECTS/DR_PROJECT/DR_RECOG/diabetic_retinopathy_recognition')
shiny::runApp('Documents/TDS_PROJECTS/DR_PROJECT/DR_RECOG/diabetic_retinopathy_recognition')
runApp('Documents/TDS_PROJECTS/DR_PROJECT/DR_RECOG/diabetic_retinopathy_recognition')
runApp('Documents/TDS_PROJECTS/DR_PROJECT/DR_RECOG/diabetic_retinopathy_recognition')
runApp('Documents/TDS_PROJECTS/DR_PROJECT/DR_RECOG/diabetic_retinopathy_recognition')
?sidebarPanel
runApp('Documents/TDS_PROJECTS/DR_PROJECT/DR_RECOG/diabetic_retinopathy_recognition')
runApp('Documents/TDS_PROJECTS/DR_PROJECT/DR_RECOG/diabetic_retinopathy_recognition')
runApp('Documents/TDS_PROJECTS/DR_PROJECT/DR_RECOG/diabetic_retinopathy_recognition')
runApp('Documents/TDS_PROJECTS/DR_PROJECT/DR_RECOG/diabetic_retinopathy_recognition')
runApp('Documents/TDS_PROJECTS/DR_PROJECT/DR_RECOG/diabetic_retinopathy_recognition')
runApp('Documents/TDS_PROJECTS/DR_PROJECT/DR_RECOG/diabetic_retinopathy_recognition')
runApp('Documents/TDS_PROJECTS/DR_PROJECT/DR_RECOG/diabetic_retinopathy_recognition')
runApp('Documents/TDS_PROJECTS/DR_PROJECT/DR_RECOG/diabetic_retinopathy_recognition')
shiny::runApp('Documents/TDS_PROJECTS/DR_PROJECT/DR_RECOG/diabetic_retinopathy_recognition')
styler:::style_active_file()
install.packages("shinycssloaders")
install.packages('OpenImageR')
library(OpenImageR)
# =========================================#
# Load packages and set working directory #
# =========================================#
library(rstudioapi)
library(ROCR)
library(pROC)
library(PRROC)
library(verification)
library(data.table)
library(tensorflow)
library(keras)
library(caret)
setwd(dirname(getActiveDocumentContext()$path))
img_size <- 299
img_path <- "../DR_DATA/CNN_BINARY_DATA_2/test_dir/"
# =========================================#
# Load packages and set working directory #
# =========================================#
library(rstudioapi)
library(ROCR)
library(pROC)
library(PRROC)
library(verification)
library(data.table)
library(tensorflow)
library(keras)
library(caret)
setwd(dirname(getActiveDocumentContext()$path))
img_size <- 299
img_path <- "../DR_DATA/CNN_BINARY_DATA_2/test_dir/"
model <- load_model_hdf5("../DR_APPS/3DR_MODELS/xception_binary_classifier_2_full_arch_avg_pool_ratio_2_1_epochs_9.h5")
Test_image_names <- list.files(img_path)
Test_image_labels <- as.data.frame(fread("../DR_LABELS/Test_image_labels_binary_data_2.csv"))
Vect_true_class <- Test_image_labels$level
Vect_pred_class <- rep("None", length(Test_image_names))
Vect_pos_class_prob <- rep(Inf, length(Test_image_names))
for (i in 1:length(Test_image_names))
{
img <- image_load(paste0(img_path, Test_image_names[i]), target_size = c(img_size, img_size))
x <- image_to_array(img)
x <- array_reshape(x, c(1, dim(x)))
x <- x / 255
Vect_pos_class_prob[i] <- as.numeric(model %>% predict(x))
ifelse((Vect_pos_class_prob[i] > 0.5), Vect_pred_class[i] <- "severe_prolif_DR", Vect_pred_class[i] <- "moderate_DR")
}
df_class_pred_prob <- data.frame("True_class" = as.factor(Vect_true_class), "Pred_class" = as.factor(Vect_pred_class), "Pos_class_prob" = as.numeric(Vect_pos_class_prob))
lvs <- c("moderate_DR", "severe_prolif_DR")
truth <- factor(df_class_pred_prob$True_class, levels = rev(lvs))
pred <- factor(df_class_pred_prob$Pred_class, levels = rev(lvs))
conf_mat <- confusionMatrix(reference = truth, pred)
conf_mat
pROC_obj <- roc(
response = as.factor(df_class_pred_prob$True_class), predictor = df_class_pred_prob$Pos_class_prob, smoothed = TRUE,
# arguments for ci
ci = TRUE, ci.alpha = 0.9, stratified = FALSE,
# arguments for plot
plot = TRUE, auc.polygon = TRUE, max.auc.polygon = TRUE, grid = TRUE,
print.auc = TRUE, show.thres = TRUE
)
sens.ci <- ci.se(pROC_obj)
plot(sens.ci, type = "shape", col = "lightblue")
Vect_id_moderate <- Test_image_labels$image_id[which((Vect_true_class == "moderate_DR") & (Vect_pred_class == "moderate_DR"))]
Vect_id_severe <- Test_image_labels$image_id[which((Vect_true_class == "severe_prolif_DR") & (Vect_pred_class == "severe_prolif_DR"))]
writeLines(Vect_id_moderate, "../DR_RESULTS/Moderate_DR_images.txt")
writeLines(Vect_id_severe, "../DR_RESULTS/Severe_prolif_DR_images.txt")
